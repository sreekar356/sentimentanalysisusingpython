# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TzPVgGymEfmhnHu5VuClVfpC34cxJt6c

Sentiment analysis in python
"""

import tweepy
from textblob import TextBlob
from wordcloud import WordCloud
import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#Twitter API credentials
consumerKey = '3P92pUmfbtQdTaLDtElECEDzo'
consumerSecret = 'OUZRSaOXLosRZcoCTT5kYoaQsjmk2zSHA1yMrNZqdWZo88gJfL'
accessToken = '757203918229090305-RFgf8sLpQNdt0ISsAmfLZbRkMkM6wtJ'
accessTokenSecret = '8XTdHeB30ESYT18CP86GlULZALShiqfPqqlEVXSaV44TE'

#Create Authencation object
authenticate = tweepy.OAuthHandler(consumerKey, consumerSecret)
authenticate.set_access_token(accessToken, accessTokenSecret)

#create API
api = tweepy.API(authenticate, wait_on_rate_limit = True)

#extract tweets from elon musk account
posts= api.user_timeline(screen_name = "elonmusk", count = 10000, lang = "en",tweet_mode = "extended")
#print last 5 tweets from the account
print("show the 5 recent tweets")
i = 1
for tweet in posts[0:5]:
  print(str(i) + ')' + tweet.full_text + '\n')
  i = i + 1

df = pd.DataFrame([tweet.full_text for tweet in posts], columns = ['tweets'])
df.head()

##create a function to CLEAN the text

def cleanTxt(text):
  text = re.sub(r'@[A-Za-z0-9]+', '', text)
  text = re.sub(r'#', '', text)
  text = re.sub(r':', '', text)
  text = re.sub(r'!', '', text)
  text = re.sub(r'&', '', text)
  text = re.sub(r'RT[\s]+', '', text)
  text = re.sub(r'http\S+', '', text)

  return text

df['tweets']= df['tweets'].apply(cleanTxt)

df

#create a function to get the subjectivity

def getSubjectivity(text):
  return TextBlob(text).sentiment.subjectivity

def getPolarity(text):
  return TextBlob(text).sentiment.polarity

df['subjectivity']= df['tweets'].apply(getSubjectivity)

df['polarity']= df['tweets'].apply(getPolarity)


df

#word cloud

allWords = ' '.join([twts for twts in df['tweets']])
wordCloud = WordCloud(width = 500,height =300,random_state = 21,max_font_size = 119).generate(allWords)

plt.imshow(wordCloud,interpolation= 'bilinear')
plt.axis('off')
plt.show()

#create a function to compute negative positive neutral
def getAnalysis(score):
  if score < 0:
    return 'Negative'
  elif score == 0:
    return 'Neutral'
  else:
    return 'Positive'

df['Analysis'] = df["polarity"].apply(getAnalysis)

df

j = 1
sortedDf = df.sort_values(by=["polarity"])
for i in range(0, sortedDf.shape[0]):
  if sortedDf['Analysis'][i] == 'Positive':
    print(str(j) + ')' + sortedDf['tweets'][i])
    print()
    j = j+1

j = 1
sortedDf = df.sort_values(by=["polarity"], ascending = 'False')
for i in range(0, sortedDf.shape[0]):
  if sortedDf['Analysis'][i] == 'Negative':
    print(str(j) + ')' + sortedDf['tweets'][i])
    print()
    j = j+1

#plot the polarity and subjectivity
print(df.shape[0])
plt.figure(figsize=(8,6))
for i in range(0, df.shape[0]):
  plt.scatter(df['polarity'][i], df['subjectivity'][i], color='Blue')

plt.title('Sentiment Analysis')
plt.xlabel('Polarity')
plt.ylabel('Subjectivity')
plt.show()

#get percentage of positive tweets

ptweets = df[df.Analysis == 'Positive']
ptweets = ptweets['tweets']
round((ptweets.shape[0] / df.shape[0]) * 100 )

ntweets = df[df.Analysis == 'Neutral']
ntweets = ntweets['tweets']
round((ntweets.shape[0] / df.shape[0]) * 100 )

#show the value counts

df['Analysis'].value_counts()

plt.title('Sentiment Analysis')
plt.xlabel('Sentiment')
plt.ylabel('Counts')
df['Analysis'].value_counts().plot(kind = 'bar')